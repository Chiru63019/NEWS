<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Engineer Babu File Viewer</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link href="https://vjs.zencdn.net/8.10.0/video-js.css" rel="stylesheet" />
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; font-family: Arial, sans-serif; }
        body { background: #f5f7fa; text-align: center; }
        .header { background: linear-gradient(90deg, #007bff, #6610f2); color: white; padding: 15px; font-size: 24px; font-weight: bold; }
        .subheading { font-size: 18px; margin-top: 10px; color: #555; font-weight: bold; }
        .subheading a { background: linear-gradient(90deg, #ff416c, #ff4b2b); -webkit-background-clip: text; -webkit-text-fill-color: transparent; text-decoration: none; font-weight: bold; }
        .container { display: flex; justify-content: space-around; margin: 30px auto; width: 80%; }
        .tab { flex: 1; padding: 20px; background: white; box-shadow: 0 4px 6px rgba(0,0,0,0.1); cursor: pointer; transition: 0.3s; border-radius: 10px; font-size: 20px; font-weight: bold; }
        .tab:hover { background: #007bff; color: white; }
        .content { display: none; margin-top: 20px; }
        .active { display: block; }
        .footer { margin-top: 30px; font-size: 18px; font-weight: bold; padding: 15px; background: #1c1c1c; color: white; border-radius: 10px; }
        .footer a { color: #ffeb3b; text-decoration: none; font-weight: bold; }
        .video-list, .pdf-list, .other-list { text-align: left; max-width: 600px; margin: auto; }
        .video-list a, .pdf-list a, .other-list a { display: block; padding: 10px; background: #fff; margin: 5px 0; border-radius: 5px; text-decoration: none; color: #007bff; font-weight: bold; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); }
        .video-list a:hover, .pdf-list a:hover, .other-list a:hover { background: #007bff; color: white; }
        .search-bar { margin: 20px auto; width: 80%; max-width: 600px; }
        .search-bar input { width: 100%; padding: 10px; border: 2px solid #007bff; border-radius: 5px; font-size: 16px; }
        .no-results { color: red; font-weight: bold; margin-top: 20px; display: none; }
        #video-player { display: none; margin: 20px auto; width: 80%; max-width: 800px; }
        #youtube-player { display: none; margin: 20px auto; width: 80%; max-width: 800px; }
        .download-button { margin-top: 10px; text-align: center; }
        .download-button a { background: #007bff; color: white; padding: 10px 20px; border-radius: 5px; text-decoration: none; font-weight: bold; }
        .download-button a:hover { background: #0056b3; }
        .datetime { margin-top: 10px; font-size: 18px; font-weight: bold; color: #2F4F4F; }
        mark { background-color: #ffeb3b; padding: 0 2px; border-radius: 2px; }
        .selected-item { background: #007bff !important; color: white !important; }
    </style>
</head>
<body>
    <div class="header">Engineer Babu File Viewer</div>
    <div class="subheading">📥 𝐄𝐱𝐭𝐫𝐚𝐜𝐭𝐞𝐝 𝐁𝐲 : <a href="https://t.me/Engineers_Babu" target="_blank">𝕰𝖓𝖌𝖎𝖓𝖊𝖊𝖗𝖘 𝕭𝖆𝖇𝖚™</a></div><br>
    <div class="datetime" id="datetime">📅 Loading...</div><br>
    <p>🔹𝐔𝐬𝐞 𝐓𝐡𝐢𝐬 𝐁𝐨𝐭 𝐟𝐨𝐫 𝐓𝐗𝐓 𝐭𝐨 𝐇𝐓𝐌𝐋 𝐟𝐢𝐥𝐞 𝐄𝐱𝐭𝐫𝐚𝐜𝐭𝐢𝐨𝐧 : <a href="https://t.me/htmldeveloperbot" target="_blank"> @𝐡𝐭𝐦𝐥𝐝𝐞𝐯𝐞𝐥𝐨𝐩𝐞𝐫𝐛𝐨𝐭 </a></p>

    <div class="search-bar">
        <input type="text" id="searchInput" placeholder="Search for videos, PDFs, or other resources..." oninput="filterContent()">
    </div>

    <div id="noResults" class="no-results">No results found.</div>

    <div id="video-player">
        <video id="engineer-babu-player" class="video-js vjs-default-skin" controls preload="auto" width="640" height="360">
            <p class="vjs-no-js">
                To view this video please enable JavaScript, and consider upgrading to a web browser that
                <a href="https://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a>
            </p>
        </video>
        <div class="download-button">
            <a id="download-link" href="#" download>Download Video</a>
        </div>
        <div style="text-align: center; margin-top: 10px; font-weight: bold; color: #007bff;">Engineer Babu Player</div>
    </div>

    <div id="youtube-player">
        <div id="player"></div>
        <div style="text-align: center; margin-top: 10px; font-weight: bold; color: #007bff;">Engineer Babu Player</div>
    </div>

    <div class="container">
        <div class="tab" onclick="showContent('videos')">Videos</div>
        <div class="tab" onclick="showContent('pdfs')">PDFs</div>
        <div class="tab" onclick="showContent('others')">Others</div>
    </div>

    <div id="videos" class="content">
        <h2>All Video Lectures</h2>
        <div class="video-list">
            <!-- Video links will be dynamically added here -->
        </div>
    </div>

    <div id="pdfs" class="content">
        <h2>All PDFs</h2>
        <div class="pdf-list">
            <!-- PDF links will be dynamically added here -->
        </div>
    </div>

    <div id="others" class="content">
        <h2>Other Resources</h2>
        <div class="other-list">
            <!-- Other links will be dynamically added here -->
        </div>
    </div>

    <div class="footer">Extracted By - <a href="https://t.me/Engineers_Babu" target="_blank">Engineer Babu</a></div>

    <script src="https://vjs.zencdn.net/8.10.0/video.min.js"></script>
    <script src="https://www.youtube.com/iframe_api"></script>
    <script>
        const player = videojs('engineer-babu-player', {
            controls: true,
            autoplay: false,
            preload: 'auto',
            fluid: true
        });

        let youtubePlayer;
        let searchTimeout;
        let currentSearchIndex = -1;
        let searchResults = [];

        function onYouTubeIframeAPIReady() {
            youtubePlayer = new YT.Player('player', {
                height: '360',
                width: '640',
                events: {
                    'onReady': onPlayerReady
                }
            });
        }

        function onPlayerReady(event) {
            // You can add additional functionality here if needed
        }

        function debounce(func, wait) {
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(searchTimeout);
                    func(...args);
                };
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(later, wait);
            };
        }

        function highlightText(text, searchTerm) {
            if (!searchTerm) return text;
            const regex = new RegExp(`(${searchTerm})`, 'gi');
            return text.replace(regex, '<mark>$1</mark>');
        }

        function playVideo(url) {
            if (url.includes('.m3u8') || url.includes('.mp4') || url.includes('.mkv') || url.includes('.webp') || url.includes('.m3u') || url.includes('.epg')) {
                document.getElementById('video-player').style.display = 'block';
                document.getElementById('youtube-player').style.display = 'none';
                player.src({ src: url, type: 'application/x-mpegURL' });
                player.play().catch(() => {
                    window.open(url, '_blank');
                });
                document.getElementById('download-link').href = url;
            } else if (url.includes('youtube.com') || url.includes('youtu.be')) {
                document.getElementById('video-player').style.display = 'none';
                document.getElementById('youtube-player').style.display = 'block';
                const videoId = extractYouTubeId(url);
                youtubePlayer.loadVideoById(videoId);
            } else {
                window.open(url, '_blank');
            }
        }

        function extractYouTubeId(url) {
            const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
            const match = url.match(regExp);
            return (match && match[2].length === 11) ? match[2] : null;
        }

        function showContent(tabName) {
            const contents = document.querySelectorAll('.content');
            contents.forEach(content => {
                content.style.display = 'none';
            });
            const selectedContent = document.getElementById(tabName);
            if (selectedContent) {
                selectedContent.style.display = 'block';
            }
            filterContent();
        }

        function filterContent() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const categories = ['videos', 'pdfs', 'others'];
            let hasResults = false;
            searchResults = [];
            currentSearchIndex = -1;

            // Remove selected-item class from all items
            document.querySelectorAll('.video-list a, .pdf-list a, .other-list a').forEach(item => {
                item.classList.remove('selected-item');
            });

            categories.forEach(category => {
                const items = document.querySelectorAll(`#${category} .${category}-list a`);
                let categoryHasResults = false;

                items.forEach(item => {
                    const itemText = item.textContent.toLowerCase();
                    const itemUrl = item.href.toLowerCase();
                    
                    if (itemText.includes(searchTerm) || itemUrl.includes(searchTerm)) {
                        item.style.display = 'block';
                        categoryHasResults = true;
                        hasResults = true;
                        searchResults.push(item);
                        
                        // Highlight matching text
                        if (searchTerm) {
                            const originalText = item.textContent;
                            item.innerHTML = highlightText(originalText, searchTerm);
                        }
                    } else {
                        item.style.display = 'none';
                    }
                });

                const categoryHeading = document.querySelector(`#${category} h2`);
                if (categoryHeading) {
                    categoryHeading.style.display = categoryHasResults ? 'block' : 'none';
                }
            });

            const noResultsMessage = document.getElementById('noResults');
            if (noResultsMessage) {
                noResultsMessage.style.display = hasResults ? 'none' : 'block';
            }
        }

        function handleKeyNavigation(e) {
            if (searchResults.length === 0) return;

            // Remove selected-item class from all items
            searchResults.forEach(item => {
                item.classList.remove('selected-item');
            });

            if (e.key === 'ArrowDown') {
                e.preventDefault();
                currentSearchIndex = (currentSearchIndex + 1) % searchResults.length;
                searchResults[currentSearchIndex].classList.add('selected-item');
                searchResults[currentSearchIndex].scrollIntoView({ behavior: 'smooth', block: 'center' });
            } else if (e.key === 'ArrowUp') {
                e.preventDefault();
                currentSearchIndex = (currentSearchIndex - 1 + searchResults.length) % searchResults.length;
                searchResults[currentSearchIndex].classList.add('selected-item');
                searchResults[currentSearchIndex].scrollIntoView({ behavior: 'smooth', block: 'center' });
            } else if (e.key === 'Enter' && currentSearchIndex >= 0) {
                e.preventDefault();
                searchResults[currentSearchIndex].click();
            }
        }

        function updateDateTime() {
            const now = new Date();
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true };
            const formattedDateTime = now.toLocaleDateString('en-US', options);
            document.getElementById('datetime').innerText = `📅 ${formattedDateTime}`;
        }

        document.addEventListener('DOMContentLoaded', () => {
            showContent('videos');
            setInterval(updateDateTime, 1000);
            
            // Add debounced search
            const searchInput = document.getElementById('searchInput');
            searchInput.addEventListener('input', debounce(filterContent, 300));
            
            // Add keyboard navigation
            searchInput.addEventListener('keydown', handleKeyNavigation);
        });
    </script>
</body>
</html> 